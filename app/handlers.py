## —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ—Ç–ø–∏—Å–∫–∞ –≤ —Ç–≥ –∫–∞–Ω–∞–ª

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.generators import gpt

import time
import datetime
import os
from dotenv import load_dotenv

load_dotenv()

router = Router()

# ID —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
CHANNEL_ID = int(os.getenv('CHANNEL_ID', '-1002387101531')) # —Ç—É—Ç –∫–∞–Ω–∞–ª –±—É–Ω—Ç–∞ —Å—Ç–æ–∏—Ç

# –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø–æ chat.id
EXCLUDED_USER_IDS = [1062594217, 987654321]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Generate(StatesGroup):
    text = State()
    previous_question = State()
    previous_response = State()


# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏
def create_contact_keyboard():
    write_button = InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å!", url="https://t.me/Caporest")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[write_button]])
    return keyboard


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    print(message.chat.id)
    print(message.chat.username)

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    with open('start.txt', 'a', encoding='utf-8') as f:
        timestamp = time.time()
        value = datetime.datetime.fromtimestamp(timestamp)
        f.write(f'\n –°—Ç–∞—Ä—Ç –±–æ—Ç–∞|{value.strftime("%Y-%m-%d %H:%M:%S")}|{message.chat.id}|{message.chat.username}')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏ 'BuntClinic' \n \n–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å)"
    )
    await state.clear()


@router.message(F.text)
async def generate(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Å–æ—Å—Ç–æ—è–Ω–∏—è) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    previous_question = await state.get_data()

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(previous_question=message.text)

    # –ü–µ—Ä–µ–¥–∞–µ–º –∏ –ø—Ä–æ—à–ª—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if previous_question:
        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: {previous_question['previous_question']}\n–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {previous_question['previous_response']}\n\n–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {message.text}"
    else:
        prompt = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    response = await gpt(prompt)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
    await state.update_data(previous_response=response.choices[0].message.content)

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    with open('rar.txt', 'a', encoding='utf-8') as f:
        timestamp = time.time()
        value = datetime.datetime.fromtimestamp(timestamp)
        f.write(
            f'\n–ó–∞–ø—Ä–æ—Å|{value.strftime("%Y-%m-%d %H:%M:%S")}|{message.chat.id}|{message.chat.username}|{message.text}'
        )

    await message.answer(
        response.choices[0].message.content,
        reply_markup=create_contact_keyboard()
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    if message.chat.id not in EXCLUDED_USER_IDS:
        channel_message = (
            f"üí¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.chat.username} \n"
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        )
        await message.bot.send_message(CHANNEL_ID, channel_message, parse_mode='Markdown')

    await state.set_state(Generate.text)